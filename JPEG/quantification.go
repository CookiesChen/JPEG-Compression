package JPEG

import "math"

var(
	tableY = [8][8]int{
		{16, 12, 14, 14, 18, 24, 49, 72},
		{11, 12, 13, 17, 22, 35, 64, 92},
		{10, 14, 16, 22, 37, 55, 78, 95},
		{16, 19, 24, 29, 56, 64, 87, 98},
		{24, 26, 40, 51, 68, 81, 103, 112},
		{40, 58, 57, 87, 109, 104, 121, 100},
		{51, 60, 69, 80, 103, 113, 120, 103},
		{61, 55, 56, 62, 77, 92, 101, 99}}
	tableU = [8][8]int{
		{17, 18, 24, 47, 99, 99, 99, 99},
		{18, 21, 26, 66, 99, 99, 99, 99},
		{24, 26, 56, 99, 99, 99, 99, 99},
		{47, 66, 99, 99, 99, 99, 99, 99},
		{99, 99, 99, 99, 99, 99, 99, 99},
		{99, 99, 99, 99, 99, 99, 99, 99},
		{99, 99, 99, 99, 99, 99, 99, 99},
		{99, 99, 99, 99, 99, 99, 99, 99}}
)

func quantification(F [8][8]nodeF)(QF [8][8]nodeF) {

	for i := 0; i < 8; i++ {
		for j := 0; j < 8; j++ {
			QF[i][j].yF = int(math.Round(float64(F[i][j].yF) / float64(tableY[i][j])))
			QF[i][j].uF = int(math.Round(float64(F[i][j].uF) / float64(tableU[i][j])))
			QF[i][j].vF = int(math.Round(float64(F[i][j].vF) / float64(tableU[i][j])))
		}
	}
	return QF
}